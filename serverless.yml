# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: matchmaker-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: grid
  variableSyntax: '\$<([ :a-zA-Z0-9._,\-\/\(\)]+?)>' # note there are no escaped slashes $<blah>
  environment:
      PGHOST: $<file(./credentials.yml):pg.host>
      PGUSER: $<file(./credentials.yml):pg.user>
      PGPASSWORD: $<file(./credentials.yml):pg.pass>
      PGDATABASE: $<file(./credentials.yml):pg.db>
  vpc:
    securityGroupIds:
      - sg-ac9fa6d7
    subnetIds:
      - subnet-89390dd1
      - subnet-1b92886d
      - subnet-4d84ae67
      - subnet-0b878736

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "ec2:*"
      Resource: "*"

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here


# you can add packaging information here
package:
  exclude:
    - "*.spec.js"

functions:
  router:
    handler: index.router
    events:
      - http:
          path: players/{playerId}
          method: get
      - http:
          path: players
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
   # events:
   #   - http:
   #       path: users/create
   #       method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
