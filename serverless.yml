# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: matchmaker-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: grid
  variableSyntax: '\$<([ :a-zA-Z0-9._,\-\/\(\)]+?)>' # note there are no escaped slashes $<blah>
  environment:
      PGHOST: $<file(./credentials.yml):pg.host>
      PGUSER: $<file(./credentials.yml):pg.user>
      PGPASSWORD: $<file(./credentials.yml):pg.pass>
      PGDATABASE: $<file(./credentials.yml):pg.db>
  vpc:
    securityGroupIds:
      - sg-ac9fa6d7
    subnetIds:
      - subnet-89390dd1
      - subnet-1b92886d
      - subnet-4d84ae67
      - subnet-0b878736

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "ec2:AcceptVpcPeeringConnection"
        - "ec2:AllocateAddress"
        - "ec2:AssignPrivateIpAddresses"
        - "ec2:AssociateAddress"
        - "ec2:AssociateDhcpOptions"
        - "ec2:AssociateRouteTable"
        - "ec2:AttachClassicLinkVpc"
        - "ec2:AttachInternetGateway"
        - "ec2:AttachNetworkInterface"
        - "ec2:AttachVpnGateway"
        - "ec2:AuthorizeSecurityGroupEgress"
        - "ec2:AuthorizeSecurityGroupIngress"
        - "ec2:CreateCustomerGateway"
        - "ec2:CreateDhcpOptions"
        - "ec2:CreateFlowLogs"
        - "ec2:CreateInternetGateway"
        - "ec2:CreateNatGateway"
        - "ec2:CreateNetworkAcl"
        - "ec2:CreateNetworkAcl"
        - "ec2:CreateNetworkAclEntry"
        - "ec2:CreateNetworkInterface"
        - "ec2:CreateRoute"
        - "ec2:CreateRouteTable"
        - "ec2:CreateSecurityGroup"
        - "ec2:CreateSubnet"
        - "ec2:CreateTags"
        - "ec2:CreateVpc"
        - "ec2:CreateVpcEndpoint"
        - "ec2:CreateVpcPeeringConnection"
        - "ec2:CreateVpnConnection"
        - "ec2:CreateVpnConnectionRoute"
        - "ec2:CreateVpnGateway"
        - "ec2:DeleteCustomerGateway"
        - "ec2:DeleteDhcpOptions"
        - "ec2:DeleteFlowLogs"
        - "ec2:DeleteInternetGateway"
        - "ec2:DeleteNatGateway"
        - "ec2:DeleteNetworkAcl"
        - "ec2:DeleteNetworkAclEntry"
        - "ec2:DeleteNetworkInterface"
        - "ec2:DeleteRoute"
        - "ec2:DeleteRouteTable"
        - "ec2:DeleteSecurityGroup"
        - "ec2:DeleteSubnet"
        - "ec2:DeleteTags"
        - "ec2:DeleteVpc"
        - "ec2:DeleteVpcEndpoints"
        - "ec2:DeleteVpcPeeringConnection"
        - "ec2:DeleteVpnConnection"
        - "ec2:DeleteVpnConnectionRoute"
        - "ec2:DeleteVpnGateway"
        - "ec2:DescribeAddresses"
        - "ec2:DescribeAvailabilityZones"
        - "ec2:DescribeClassicLinkInstances"
        - "ec2:DescribeCustomerGateways"
        - "ec2:DescribeDhcpOptions"
        - "ec2:DescribeFlowLogs"
        - "ec2:DescribeInstances"
        - "ec2:DescribeInternetGateways"
        - "ec2:DescribeKeyPairs"
        - "ec2:DescribeMovingAddresses"
        - "ec2:DescribeNatGateways"
        - "ec2:DescribeNetworkAcls"
        - "ec2:DescribeNetworkInterfaceAttribute"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DescribePrefixLists"
        - "ec2:DescribeRouteTables"
        - "ec2:DescribeSecurityGroups"
        - "ec2:DescribeSubnets"
        - "ec2:DescribeTags"
        - "ec2:DescribeVpcAttribute"
        - "ec2:DescribeVpcClassicLink"
        - "ec2:DescribeVpcEndpoints"
        - "ec2:DescribeVpcEndpointServices"
        - "ec2:DescribeVpcPeeringConnections"
        - "ec2:DescribeVpcs"
        - "ec2:DescribeVpnConnections"
        - "ec2:DescribeVpnGateways"
        - "ec2:DetachClassicLinkVpc"
        - "ec2:DetachInternetGateway"
        - "ec2:DetachNetworkInterface"
        - "ec2:DetachVpnGateway"
        - "ec2:DisableVgwRoutePropagation"
        - "ec2:DisableVpcClassicLink"
        - "ec2:DisassociateAddress"
        - "ec2:DisassociateRouteTable"
        - "ec2:EnableVgwRoutePropagation"
        - "ec2:EnableVpcClassicLink"
        - "ec2:ModifyNetworkInterfaceAttribute"
        - "ec2:ModifySubnetAttribute"
        - "ec2:ModifyVpcAttribute"
        - "ec2:ModifyVpcEndpoint"
        - "ec2:MoveAddressToVpc"
        - "ec2:RejectVpcPeeringConnection"
        - "ec2:ReleaseAddress"
        - "ec2:ReplaceNetworkAclAssociation"
        - "ec2:ReplaceNetworkAclEntry"
        - "ec2:ReplaceRoute"
        - "ec2:ReplaceRouteTableAssociation"
        - "ec2:ResetNetworkInterfaceAttribute"
        - "ec2:RestoreAddressToClassic"
        - "ec2:RevokeSecurityGroupEgress"
        - "ec2:RevokeSecurityGroupIngress"
        - "ec2:UnassignPrivateIpAddresses"
      Resource: "*"

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here


# you can add packaging information here
package:
  exclude:
    - "*.spec.js"

functions:
  getPlayer:
    handler: index.getPlayer
    events:
      - http:
          path: players/{playerId}
          method: get

  listPlayers:
    handler: index.listPlayers
    events:
      - http:
          path: players
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
   # events:
   #   - http:
   #       path: users/create
   #       method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
